cmake_minimum_required(VERSION 3.15)
project(RobbanPlanterar)

# Set C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Include FetchContent module
include(FetchContent)

# Detect Emscripten
if(EMSCRIPTEN)
    set(PLATFORM_WEB TRUE)
    message(STATUS "Building for Web with Emscripten")
    
    # For Emscripten, let's use a simpler approach and fetch a web-compatible raylib
    FetchContent_Declare(
        raylib
        GIT_REPOSITORY https://github.com/raysan5/raylib.git
        GIT_TAG 5.0
    )
    
    # Set raylib options for web BEFORE making available
    set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
    set(BUILD_GAMES OFF CACHE BOOL "" FORCE)
    set(CUSTOMIZE_BUILD ON CACHE BOOL "" FORCE)
    
    # Disable problematic features for web
    set(SUPPORT_FILEFORMAT_WAV OFF CACHE BOOL "" FORCE)
    set(SUPPORT_FILEFORMAT_OGG OFF CACHE BOOL "" FORCE)
    set(SUPPORT_FILEFORMAT_MP3 OFF CACHE BOOL "" FORCE)
    set(SUPPORT_FILEFORMAT_FLAC OFF CACHE BOOL "" FORCE)
    
    FetchContent_MakeAvailable(raylib)
    
else()
    # Native build - use original logic
    set(PLATFORM_WEB FALSE)
    message(STATUS "Building for Native platform")
    
    # Check dependencies for native builds
    if(UNIX AND NOT APPLE)
        find_package(PkgConfig REQUIRED)
        find_package(X11 REQUIRED)
        pkg_check_modules(XRANDR REQUIRED xrandr)
        pkg_check_modules(XCursor REQUIRED xcursor)
        pkg_check_modules(Xi REQUIRED xi)
        pkg_check_modules(Xinerama REQUIRED xinerama)
        message(STATUS "All required X11 libraries found")
    endif()
    
    # Fetch raylib for native
    FetchContent_Declare(
        raylib
        GIT_REPOSITORY https://github.com/raysan5/raylib.git
        GIT_TAG 5.0
    )
    
    set(BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)
    set(BUILD_GAMES OFF CACHE BOOL "" FORCE)
    
    FetchContent_MakeAvailable(raylib)
endif()

# Add executable
add_executable(robban_planterar
    robban.cpp
    NetworkManager.cpp
)

# Link libraries
target_link_libraries(robban_planterar raylib)

# Platform-specific settings
if(PLATFORM_WEB)
    # Emscripten-specific settings
    set_target_properties(robban_planterar PROPERTIES
        SUFFIX ".html"
    )
    
    # Emscripten compiler flags
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s USE_GLFW=3")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ASSERTIONS=1")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s WASM=1")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ASYNCIFY")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s GL_ENABLE_GET_PROC_ADDRESS=1")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s EXPORTED_FUNCTIONS=['_main','_setUsername']")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s EXPORTED_RUNTIME_METHODS=['ccall','cwrap']")
    
    # Memory settings
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s INITIAL_MEMORY=67108864")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s ALLOW_MEMORY_GROWTH=1")
    
    # File system settings
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -s FORCE_FILESYSTEM=1")
    
    # Optimization settings
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -O3")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --closure 1")
    else()
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -O1")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g")
    endif()
    
    # Shell file customization (if exists)
    if(EXISTS "${CMAKE_SOURCE_DIR}/shell_multiplayer.html")
        set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} --shell-file ${CMAKE_SOURCE_DIR}/shell_multiplayer.html")
    endif()
    
elseif(WIN32)
    target_link_libraries(robban_planterar winmm)
elseif(APPLE)
    target_link_libraries(robban_planterar "-framework CoreVideo -framework IOKit -framework Cocoa -framework GLUT -framework OpenGL")
elseif(UNIX)
    target_link_libraries(robban_planterar GL m pthread dl rt X11)
endif()

# Compiler-specific options
if(MSVC)
    target_compile_options(robban_planterar PRIVATE /W4)
else()
    target_compile_options(robban_planterar PRIVATE -Wall -Wextra -pedantic)
    
    if(PLATFORM_WEB)
        target_compile_options(robban_planterar PRIVATE -s USE_GLFW=3)
    endif()
endif()

# Web-specific definitions
if(PLATFORM_WEB)
    target_compile_definitions(robban_planterar PRIVATE PLATFORM_WEB)
endif()

# Install targets
if(NOT PLATFORM_WEB)
    install(TARGETS robban_planterar RUNTIME DESTINATION bin)
else()
    install(FILES 
        ${CMAKE_BINARY_DIR}/robban_planterar.html
        ${CMAKE_BINARY_DIR}/robban_planterar.js  
        ${CMAKE_BINARY_DIR}/robban_planterar.wasm
        DESTINATION web
        OPTIONAL
    )
endif()

# Custom targets for web development
if(PLATFORM_WEB)
    add_custom_target(serve
        COMMAND python3 -m http.server 8000
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
        COMMENT "Starting HTTP server on http://localhost:8000"
    )
    
    add_custom_target(open
        COMMAND ${CMAKE_COMMAND} -E echo "Opening http://localhost:8000/robban_planterar.html"
        DEPENDS robban_planterar
        COMMENT "Opening game in browser"
    )
endif()
